// Generated by CoffeeScript 1.12.3
var ArgumentParser, argparser, argv, binarySplit, fs, map, mkdirp, packageInfo, path, pump, splitStream

fs = require('fs')

path = require('path')

binarySplit = require('binary-split')

map = require('through2')

mkdirp = require('mkdirp')

pump = require('pump')

ArgumentParser = require('argparse').ArgumentParser

packageInfo = require('../package')

argparser = new ArgumentParser({
  addHelp: true,
  description: 'Read JSON from STDIN, split by key and output to directory',
  version: packageInfo.version
})

argparser.addArgument(['key'], {
  help: 'Key that determines where to output JSON',
  metavar: 'KEY',
  type: 'string'
})

argparser.addArgument(['directory'], {
  defaultValue: './',
  help: 'Location to output JSON files, defaults to ./',
  metavar: 'DIRECTORY',
  nargs: '?',
  type: 'string'
})

argparser.addArgument(['--omit-key'], {
  action: 'storeTrue',
  defaultValue: false,
  dest: 'omitKey',
  help: 'Remove the KEY field from records before writing.'
})

argv = argparser.parseArgs()

splitStream = function (key, directory, omitKey) {
  return map({
    objectMode: true
  }, function (obj, enc, cb) {
    var destination
    obj = JSON.parse(obj.toString())
    if (typeof obj[key] !== 'string') {
      console.error("Record missing KEY ('" + key + "'): " + (JSON.stringify(obj)))
      cb()
    }
    destination = path.join(directory, obj[key] + '.json')
    if (omitKey) {
      delete obj[key]
    }
    return mkdirp(path.dirname(destination), function (err) {
      if (err) {
        return cb(err)
      } else {
        return fs.appendFile(destination, JSON.stringify(obj) + '\n', cb)
      }
    })
  })
}

pump(process.stdin, binarySplit(), splitStream(argv.key, argv.directory, argv.omitKey), function (err) {
  if (err != null) {
    return console.error(err)
  }
})
